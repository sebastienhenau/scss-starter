@use "sass:map";
@use "@/styles/tools/generators/default" as default;
@use "@/styles/tools/generators/value" as value;
@use "./settings" as settings;
@use "@/styles/tools/sizes" as sizes;

[class*="o-grid"] {
	&[class*="o-gap"] {
		gap: var(--grid-gap, unset);
	}

	&[class*="o-col-gap"] {
		column-gap: var(--grid-col-gap, unset);
	}

	&[class*="o-row-gap"] {
		row-gap: var(--grid-row-gap, unset);
	}

	&.o-gap {
		@include default.base-breakpoints(map.get(settings.$gap, default), settings.$spacing) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include default.base-breakpoints(map.get(settings.$col-gap, default), settings.$spacing) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include default.base-breakpoints(map.get(settings.$row-gap, default), settings.$spacing) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include value.base(map.get(settings.$gap-item, value)) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include value.base(map.get(settings.$col-gap-item, value)) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include value.base(map.get(settings.$row-gap-item, value)) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include default.at-breakpoints(map.get(settings.$gap, at), settings.$spacing) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include default.at-breakpoints(map.get(settings.$col-gap, at), settings.$spacing) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include default.at-breakpoints(map.get(settings.$row-gap, at), settings.$spacing) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include value.at(map.get(settings.$gap-item, at)) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include value.at(map.get(settings.$col-gap-item, at)) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include value.at(map.get(settings.$row-gap-item, at)) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include default.to-breakpoints(map.get(settings.$gap, to), settings.$spacing) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include default.to-breakpoints(map.get(settings.$col-gap, to), settings.$spacing) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include default.to-breakpoints(map.get(settings.$row-gap, to), settings.$spacing) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include value.to(map.get(settings.$gap-item, to)) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include value.to(map.get(settings.$col-gap-item, to)) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include value.to(map.get(settings.$row-gap-item, to)) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}

	&.o-gap {
		@include value.between(map.get(settings.$gap-item, between)) using ($item) {
			--grid-gap: #{sizes.scale($item)};
		}
	}

	&.o-col-gap {
		@include value.between(map.get(settings.$col-gap-item, between)) using ($item) {
			--grid-col-gap: #{sizes.scale($item)};
		}
	}

	&.o-row-gap {
		@include value.between(map.get(settings.$row-gap-item, between)) using ($item) {
			--grid-row-gap: #{sizes.scale($item)};
		}
	}
}
