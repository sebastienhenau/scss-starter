@use "sass:map";
@use "@/styles/tools/generators/default" as default;
@use "@/styles/tools/units" as units;
@use "@/styles/tools/sizes" as sizes;
@use "@/styles/settings/core" as core;
@use "./settings" as settings;

$_class-separator: core.$class-separator;

[class*="o-container-inset"] {
	--container-max-width-value: unset;
	--container-padding: max(
		calc((100% - var(--container-max-width-value)) * 0.5 + var(--container-padding-value)),
		var(--container-padding-value)
	);
	--container-padding-right: var(--container-padding);
	--container-padding-left: var(--container-padding);
}

@each $name, $settings in settings.$containers {
	$suffix: if($name == "default", "", #{$_class-separator}#{$name});
	$max-width: units.convert(map.get($settings, max-width));
	$container-inset: map.get($settings, container-inset);
	$container-inset-l: map.get($settings, container-inset-l);
	$container-inset-r: map.get($settings, container-inset-r);

	@if ($container-inset) {
		.o-container-inset {
			@include default.generate($container-inset, settings.$spacing) using ($item) {
				--container-max-width-value: #{$max-width};
				--container-padding-value: #{sizes.scale($item)};
			}
		}
	}

	@if ($container-inset-l) {
		.o-container-inset-l {
			@include default.generate($container-inset-l, settings.$spacing) using ($item) {
				--container-max-width-value: #{$max-width};
				--container-padding-value: #{sizes.scale($item)};
				--container-padding-right: unset;
			}
		}
	}

	@if ($container-inset-r) {
		.o-container-inset-r {
			@include default.generate($container-inset-r, settings.$spacing) using ($item) {
				--container-max-width-value: #{$max-width};
				--container-padding-value: #{sizes.scale($item)};
				--container-padding-left: unset;
			}
		}
	}
}
