@use "sass:map";
@use "@/styles/tools/generators/default" as default;
@use "@/styles/tools/units" as units;
@use "@/styles/settings/core" as core;
@use "./settings" as settings;

$_class-separator: core.$class-separator;

[class*="o-container-width-l"],
[class*="o-container-width-r"] {
	--container-max-width-value: unset;
	--container-max-width: calc(var(--container-max-width-value) + ((100% - var(--container-max-width-value)) * 0.5));
}

@each $name, $settings in settings.$containers {
	$suffix: if($name == "default", "", #{$_class-separator}#{$name});
	$max-width: units.convert(map.get($settings, max-width));
	$container-width: map.get($settings, container-width);
	$container-width-l: map.get($settings, container-width-l);
	$container-width-r: map.get($settings, container-width-r);

	@if ($container-width) {
		.o-container-width#{$suffix} {
			@include default.generate($container-width) {
				--container-width: 100%;
				--container-max-width: #{$max-width};
				--container-margin-right: auto;
				--container-margin-left: auto;
			}
		}
	}

	@if ($container-width-l) {
		.o-container-width-l#{$suffix} {
			@include default.generate($container-width-l) {
				--container-width: 100%;
				--container-max-width-value: #{$max-width};
				--container-margin-left: auto;
			}
		}
	}

	@if ($container-width-r) {
		.o-container-width-r#{$suffix} {
			@include default.generate($container-width-r) {
				--container-width: 100%;
				--container-max-width-value: #{$max-width};
				--container-margin-right: auto;
			}
		}
	}
}
