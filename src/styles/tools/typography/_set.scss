@use "sass:meta";
@use "sass:list";
@use "sass:map";
@use "@/styles/tools/helpers" as helpers;
@use "@/styles/tools/breakpoints" as breakpoints;
@use "@/styles/tools/typography/config" as config;

$_font-styles: config.$font-styles;
$_breakpoints-setup: breakpoints.$setup;

@function _get-base($config) {
	$has-base: map.has-key($config, base);

	@return if($has-base, map.get($config, base), $config);
}

@function _get-variant($path...) {
	$base: null;
	$variants: null;
	$result: ();
	$config: $_font-styles;

	@each $item in $path {
		$config: map.get($config, $item) or ();
		$has-base: map.has-key($config, base);
		$has-variants: map.has-key($config, variants);

		@if ($has-base and not($base)) {
			$base: map.get($config, base);
		}

		@if ($has-variants and not($variants)) {
			$variants: map.get($config, variants);
		}

		@if (not($has-base) and not($has-variants)) {
			$config: map.get($variants, $item);
			$result: helpers.map-none-destructive-merge($result, $config);
		}
	}

	@return helpers.map-none-destructive-merge($base, $result);
}

@mixin _set-prop($prop, $value) {
	@if (meta.type-of($value) == "number") {
		#{$prop}: #{helpers.number-convert($value, config.$unit)};
	} @else {
		#{$prop}: #{$value};
	}
}

@mixin _set-props($config) {
	@each $key, $value in $config {
		@include _set-prop($key, $value);
	}
}

@mixin _set-default($config) {
	@each $key, $value in $config {
		@if (not(meta.type-of($value) == map)) {
			@include _set-prop($key, $value);
		}
	}
}

@mixin _set-at($config) {
	@each $key, $value in $config {
		$is-breakpoint: map.has-key($_breakpoints-setup, $key);

		@if ($is-breakpoint) {
			@include breakpoints.at($key) {
				@include _set-props($value);
			}
		} @else if (helpers.string-starts-with($key, ">")) {
			$breakpoint-key: helpers.string-replace($key, ">", "");
			$is-breakpoint: map.has-key($_breakpoints-setup, $breakpoint-key);

			@if ($is-breakpoint) {
				@include breakpoints.at($breakpoint-key) {
					@include _set-props($value);
				}
			}
		}
	}
}

@mixin _set-to($config) {
	$result: ();

	@each $key, $value in $config {
		@if (helpers.string-starts-with($key, "<")) {
			$breakpoint-key: helpers.string-replace($key, "<", "");
			$is-breakpoint: map.has-key($_breakpoints-setup, $breakpoint-key);

			@if ($is-breakpoint) {
				@include breakpoints.to($breakpoint-key) {
					@include _set-props($value);
				}
			}
		}
	}
}

@mixin _set-between($config) {
	@each $key, $value in $config {
		$breakpoints: helpers.string-split($key, "-");
		$valid-length: list.length($breakpoints) == 2;

		@if ($valid-length) {
			$start-breakpoint: list.nth($breakpoints, 1);
			$end-breakpoint: list.nth($breakpoints, 2);
			$is-start-breakpoint: map.has-key($_breakpoints-setup, $start-breakpoint);
			$is-end-breakpoint: map.has-key($_breakpoints-setup, $end-breakpoint);

			@if ($is-start-breakpoint and $is-end-breakpoint) {
				@include breakpoints.between($start-breakpoint, $end-breakpoint) {
					@include _set-props($value);
				}
			}
		}
	}
}

@mixin set($path...) {
	$config: map.get($_font-styles, $path...);
	$config: if($config, _get-base($config), _get-variant($path...));

	@include _set-default($config);
	@include _set-at($config);
	@include _set-to($config);
	@include _set-between($config);
}
