@use "sass:map";
@use "sass:list";
@use "@/styles/tools/breakpoints" as breakpoints;
@use "@/styles/settings/core" as core;
@use "@/styles/tools/helpers" as helpers;
@use "@/styles/settings/breakpoints" as settings-breakpoints;

$_class-to-indicator: core.$class-to-indicator;
$_viewports: settings-breakpoints.$viewports;

@mixin to($data) {
	@if ($data and list.length($data) > 0) {
		@each $viewport in helpers.reverse-list($data) {
			&#{$_class-to-indicator}#{$viewport} {
				@include breakpoints.to($viewport) {
					@content;
				}
			}
		}
	}
}

@mixin to-breakpoints($data, $breakpoints) {
	@if ($data and list.length($data) > 0) {
		@each $target-breakpoint in helpers.reverse-list($data) {
			&#{$_class-to-indicator}#{$target-breakpoint} {
				$next-value: null;
				$reversed-to: helpers.reverse-map($breakpoints);
				$keys: map.keys($reversed-to);
				$length: list.length($keys);
				$target-reached: false;

				@each $breakpoint, $value in $reversed-to {
					$is-default-key: $breakpoint == "default" and not(map.has-key($_viewports, $breakpoint));
					$index: list.index($keys, $breakpoint);
					$next-index: if($index != $length, list.index($keys, $breakpoint) + 1, null);
					$next-breakpoint: if($next-index != null, list.nth($keys, $next-index), null);
					$next-value: if($next-index != null, map.get($breakpoints, $next-breakpoint), null);
					$next-value: if($next-index != null, $next-value, null);
					$target-width: map.get($_viewports, $target-breakpoint);
					$width: if(not($is-default-key), map.get($_viewports, $breakpoint), 0);

					@if ($width < $target-width and not($target-reached)) {
						@if ($value) {
							@include breakpoints.to($target-breakpoint) {
								@content ($value);
							}
						}

						$target-reached: true;
					}

					@if ($width <= $target-width and not($is-default-key)) {
						@if ($next-value) {
							@include breakpoints.to($breakpoint) {
								@content ($next-value);
							}
						}
					}
				}
			}
		}
	}
}
